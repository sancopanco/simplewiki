import hmac
import re 
import hashlib 
import random
import os 
import jinja2
from string import letters
import logging

secret = 'sancopanco'
dir_name = '\\'.join(os.path.dirname(__file__).split('\\')[:-1])
#logging.error(dir_name)
template_dir =os.path.join(dir_name,'templates')
JINJA_ENVIRONMENT = jinja2.Environment(loader = jinja2.FileSystemLoader(template_dir),
														autoescape = True )
def render_template(template, **params):
	t = JINJA_ENVIRONMENT.get_template(template)
	return t.render(params)

def check_secure_val(secure_val):
	val = secure_val.split('|')[0]
	if secure_val == make_secure_val(val):
		return val
		
def make_secure_val(val):
	return '%s|%s' % (val, hmac.new(secret, val).hexdigest())

USER_RE = re.compile(r"^[a-zA-Z0-9_-]{3,20}$")	
def valid_username(username):
	return username and USER_RE.match(username)	

PASS_RE = re.compile(r"^.{3,20}$")	
def valid_password(password):
	return password and PASS_RE.match(password)
	
EMAIL_RE = re.compile(r"^[\S]+@[\S]+\.[\S]+$")	
def valid_email(email):
	return email and EMAIL_RE.match(email)

	
def make_salt(length = 5):
	return ''.join(random.choice(letters) for x in xrange(length))	
	
def make_pw_hash(name, pw, salt = None):
	if not salt:
		salt = make_salt()
	h = hashlib.sha256(name + pw + salt).hexdigest()
	return '%s,%s' % (salt, h)	
	
def valid_pw(name, password, h):
	salt = h.split(',')[0]
	return h == make_pw_hash(name, password, salt)	